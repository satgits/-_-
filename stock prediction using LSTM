import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Fetch historical data for Apple
data = yf.download('AAPL', start='2010-01-01', end='2022-01-01')
data['Close'].plot(title="Apple's Stock Price")
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.show()
# Fetch historical data for Apple
data = yf.download('AAPL', start='2010-01-01', end='2022-01-01')
data['Close'].plot(title="Apple's Stock Price")
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.show()
# Normalize the data
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data['Close'].values.reshape(-1,1))

# Create a function to process the data into 7 day look back slices
def create_dataset(dataset, look_back=7):
    X, Y = [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back), 0]
        X.append(a)
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)

look_back = 7
X, y = create_dataset(data_scaled, look_back)

# Reshape input to be [samples, time steps, features]
X = np.reshape(X, (X.shape[0], X.shape[1], 1))
# Split data into train and test sets
train_size = int(len(X) * 0.67)
test_size = len(X) - train_size
trainX, testX = X[0:train_size], X[train_size:len(X)]
trainY, testY = y[0:train_size], y[train_size:len(y)]

# Create and fit the LSTM network
model = Sequential()
model.add(LSTM(50, input_shape=(look_back, 1)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)
# Assuming trainPredict and testPredict are already proper shapes from model.predict(), which should be 2D.
trainPredict = scaler.inverse_transform(trainPredict)
testPredict = scaler.inverse_transform(testPredict)

# Ensure trainY and testY are 2D before inverse transforming
trainY_reshaped = np.reshape(trainY, (-1, 1))  # Reshape to 2D if necessary
testY_reshaped = np.reshape(testY, (-1, 1))    # Reshape to 2D if necessary

trainY = scaler.inverse_transform(trainY_reshaped)
testY = scaler.inverse_transform(testY_reshaped)
# Debugging information
print("Start Index:", start_index)
print("End Index:", end_index)
print("Length of testPredict:", len(testPredict))
print("Length of slice in testPredictPlot:", len(testPredictPlot[start_index:end_index, :]))
# Initialization
testPredictPlot = np.empty_like(data_scaled)
testPredictPlot[:, :] = np.nan

# Calculating indices
start_index = len(trainPredict) + (look_back * 2) + 1
end_index = start_index + len(testPredict)

# Debug outputs
print("Start Index:", start_index)
print("End Index:", end_index)
print("Length of testPredict:", len(testPredict))
print("Slice length available in testPredictPlot:", len(testPredictPlot[start_index:, 0]))

# Check if lengths match
if len(testPredictPlot[start_index:end_index, 0]) == len(testPredict):
    testPredictPlot[start_index:end_index, :] = testPredict
else:
    print("Mismatch in lengths. Cannot broadcast.")
    print("Available Length:", len(testPredictPlot[start_index:end_index, 0]))

# Plotting
plt.figure(figsize=(15, 8))
plt.plot(data_scaled, label='Scaled Data')
plt.plot(testPredictPlot, label='Test Predictions', color='red')
plt.legend()
plt.show()
